<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Falling Spinning Cubes</title>
    <style>
        body {
            margin: 0;
            overflow: hidden;
            background-color: #000;
        }
        canvas {
            display: block;
        }
    </style>
</head>
<body>
    <script src="https://threejs.org/build/three.min.js"></script>
    <script>
        let scene, camera, renderer, cubes = [];

        function init() {
            scene = new THREE.Scene();
            camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
            renderer = new THREE.WebGLRenderer({ antialias: true });
            renderer.setSize(window.innerWidth, window.innerHeight);
            document.body.appendChild(renderer.domElement);

            const light = new THREE.DirectionalLight(0xffffff, 1);
            light.position.set(5, 5, 5).normalize();
            scene.add(light);

            const textureLoader = new THREE.TextureLoader();
            const tileTexture = textureLoader.load('textures/tiles.jpg');

            for (let i = 0; i < 50; i++) {
                const geometry = new THREE.BoxGeometry();
                const material = new THREE.MeshStandardMaterial({ map: tileTexture });
                const cube = new THREE.Mesh(geometry, material);
                cube.position.set(Math.random() * 20 - 10, Math.random() * 20 - 10, Math.random() * 20 - 10);
                cube.rotation.set(Math.random() * Math.PI, Math.random() * Math.PI, Math.random() * Math.PI);
                scene.add(cube);
                cubes.push(cube);
            }

            camera.position.z = 5;
        }

        function animate() {
            requestAnimationFrame(animate);

            cubes.forEach(cube => {
                cube.rotation.x += 0.01;
                cube.rotation.y += 0.01;
                cube.position.y -= 0.05;
                if (cube.position.y < -10) {
                    cube.position.y = 10;
                }
            });

            renderer.render(scene, camera);
        }

        window.addEventListener('resize', () => {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        });

        init();
        animate();
    </script>
</body>
</html>